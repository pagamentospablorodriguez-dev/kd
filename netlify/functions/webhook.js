const { GoogleGenerativeAI } = require('@google/generative-ai');

// Configura√ß√µes seguras com vari√°veis de ambiente
const GEMINI_API_KEY = process.env.VITE_GOOGLE_AI_API_KEY;
const EVOLUTION_BASE_URL = process.env.VITE_EVOLUTION_API_URL;
const EVOLUTION_TOKEN = process.env.VITE_EVOLUTION_TOKEN;
const EVOLUTION_INSTANCE_ID = process.env.VITE_EVOLUTION_INSTANCE_ID;

// Inicializar Gemini
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// üóÑÔ∏è ARMAZENAMENTO EM MEM√ìRIA COMPARTILHADO GLOBAL
if (!global.orders) global.orders = new Map();
if (!global.restaurantConversations) global.restaurantConversations = new Map();

// üé≠ PROMPT PARA RESPONDER COMO CLIENTE HUMANO
const CLIENT_RESPONSE_PROMPT = `
Voc√™ √© um cliente real fazendo um pedido de delivery por WhatsApp. Responda √†s perguntas do restaurante de forma natural, educada e humana.

PERSONALIDADE:
- Cliente brasileiro comum
- Educado mas direto
- Ansioso pelo pedido
- Fala de forma natural (sem ser muito formal)

REGRAS DE RESPOSTA:
- Use linguagem coloquial brasileira
- Seja educado: "obrigado", "por favor", "oi", "tudo bem?"
- Responda apenas o que foi perguntado
- Se n√£o souber algo espec√≠fico, pe√ßa um momento para verificar
- Demonstre que est√° interessado no pedido
- Use emojis ocasionalmente (üòä, üëç, üôè)

INFORMA√á√ïES DO SEU PEDIDO:
{ORDER_CONTEXT}

CONVERSA AT√â AGORA:
{CONVERSATION_HISTORY}

IMPORTANTE: 
- Responda como se fosse o cliente real
- N√ÉO mencione que √© uma IA
- Seja consistente com as informa√ß√µes do pedido
- Se o restaurante confirmar o pedido, agrade√ßa e pergunte o tempo de entrega

Responda de forma humana e natural:
`;

exports.handler = async (event, context) => {
  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'Content-Type',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
  };

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers };
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    const webhookData = JSON.parse(event.body);
    console.log(`[WEBHOOK] üì• Dados recebidos:`, JSON.stringify(webhookData, null, 2));
    
    // Verificar se √© uma mensagem recebida
    if (webhookData.event === 'messages.upsert' && webhookData.data) {
      const message = webhookData.data;
      
      // Verificar se √© uma mensagem recebida (n√£o enviada por n√≥s)
      if (message.key && !message.key.fromMe && message.message) {
        const phoneNumber = message.key.remoteJid.replace('@s.whatsapp.net', '');
        const messageText = message.message.conversation || 
                           message.message.extendedTextMessage?.text || '';

        console.log(`[WEBHOOK] üì± Mensagem recebida de ${phoneNumber}: ${messageText}`);

        // üîç BUSCAR PEDIDO USANDO COMPARA√á√ÉO MAIS FLEX√çVEL
        const order = findOrderByRestaurantPhoneFlexible(phoneNumber);
        
        if (order) {
          console.log(`[WEBHOOK] üçï RESTAURANTE ENCONTRADO! Processando resposta...`);
          await handleRestaurantResponse(order, messageText, phoneNumber);
        } else {
          console.log(`[WEBHOOK] ‚ùå Nenhum pedido encontrado para telefone: ${phoneNumber}`);
          console.log(`[WEBHOOK] üìä Pedidos ativos: ${global.orders.size}`);
          
          // Log de debug dos pedidos ativos
          for (const [sessionId, orderData] of global.orders) {
            const restPhone = orderData.restaurant?.whatsapp?.replace(/\D/g, '') || 'sem telefone';
            console.log(`[WEBHOOK] üîç Pedido ${sessionId}: ${restPhone}`);
          }
        }
      } else {
        console.log(`[WEBHOOK] ‚è≠Ô∏è Mensagem enviada por n√≥s, ignorando`);
      }
    } else {
      console.log(`[WEBHOOK] ‚è≠Ô∏è Evento n√£o √© mensagem, ignorando`);
    }

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ success: true })
    };

  } catch (error) {
    console.error('[WEBHOOK] ‚ùå Erro cr√≠tico:', error);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: 'Erro interno do servidor' })
    };
  }
};

// üîç ENCONTRAR PEDIDO PELO TELEFONE DO RESTAURANTE - VERS√ÉO FLEX√çVEL
function findOrderByRestaurantPhoneFlexible(phone) {
  console.log(`[WEBHOOK] üîç Procurando pedido para telefone: ${phone}`);
  
  // Limpar formato do telefone para compara√ß√£o (remover TUDO que n√£o √© n√∫mero)
  const cleanPhone = phone.replace(/\D/g, '');
  console.log(`[WEBHOOK] üßπ Telefone limpo: ${cleanPhone}`);
  
  for (const [sessionId, order] of global.orders) {
    if (order.restaurant && order.restaurant.whatsapp) {
      const cleanRestaurantPhone = order.restaurant.whatsapp.replace(/\D/g, '');
      
      console.log(`[WEBHOOK] üîç Comparando:`);
      console.log(`[WEBHOOK] üì± Recebido: "${cleanPhone}" (${cleanPhone.length} d√≠gitos)`);
      console.log(`[WEBHOOK] üè™ Restaurante: "${cleanRestaurantPhone}" (${cleanRestaurantPhone.length} d√≠gitos)`);
      
      // ‚ú® COMPARA√á√ÉO FLEX√çVEL - permitir diferentes formatos
      if (cleanRestaurantPhone === cleanPhone) {
        console.log(`[WEBHOOK] ‚úÖ MATCH EXATO! Sess√£o: ${sessionId}`);
        return { ...order, sessionId };
      }
      
      // Se o n√∫mero recebido tem menos d√≠gitos, pode ser sem o c√≥digo do pa√≠s
      if (cleanPhone.length < cleanRestaurantPhone.length) {
        const restaurantWithoutCountryCode = cleanRestaurantPhone.substring(2); // Remove 55
        if (restaurantWithoutCountryCode === cleanPhone) {
          console.log(`[WEBHOOK] ‚úÖ MATCH SEM C√ìDIGO DO PA√çS! Sess√£o: ${sessionId}`);
          return { ...order, sessionId };
        }
      }
      
      // Se o n√∫mero do restaurante tem menos d√≠gitos
      if (cleanRestaurantPhone.length < cleanPhone.length) {
        const phoneWithoutCountryCode = cleanPhone.substring(2); // Remove 55
        if (cleanRestaurantPhone === phoneWithoutCountryCode) {
          console.log(`[WEBHOOK] ‚úÖ MATCH REMOVENDO C√ìDIGO DO RECEBIDO! Sess√£o: ${sessionId}`);
          return { ...order, sessionId };
        }
      }
      
      // Compara√ß√£o por sufixo (√∫ltimos 9 d√≠gitos - n√∫mero do celular)
      if (cleanPhone.length >= 9 && cleanRestaurantPhone.length >= 9) {
        const phoneSuffix = cleanPhone.slice(-9);
        const restaurantSuffix = cleanRestaurantPhone.slice(-9);
        
        if (phoneSuffix === restaurantSuffix) {
          console.log(`[WEBHOOK] ‚úÖ MATCH POR SUFIXO! Sess√£o: ${sessionId}`);
          return { ...order, sessionId };
        }
      }
    }
  }
  
  console.log(`[WEBHOOK] ‚ùå Nenhum pedido encontrado para o telefone: ${phone}`);
  return null;
}

// üé≠ PROCESSAR RESPOSTA DO RESTAURANTE
async function handleRestaurantResponse(order, messageText, restaurantPhone) {
  try {
    console.log(`[RESTAURANT] üçï Processando resposta do restaurante`);
    console.log(`[RESTAURANT] üì± Telefone: ${restaurantPhone}`);
    console.log(`[RESTAURANT] üí¨ Mensagem: ${messageText}`);

    const sessionId = order.sessionId;
    
    // Obter conversa existente com o restaurante
    let conversation = global.restaurantConversations.get(sessionId) || [];
    
    // Adicionar mensagem do restaurante √† conversa
    conversation.push({
      role: 'restaurant',
      content: messageText,
      timestamp: new Date()
    });

    console.log(`[RESTAURANT] üìù Conversa atualizada. Total: ${conversation.length} mensagens`);

    // üîç ANALISAR TIPO DE MENSAGEM DO RESTAURANTE
    const messageAnalysis = analyzeRestaurantMessage(messageText);
    console.log(`[RESTAURANT] üîç An√°lise: ${messageAnalysis.type}`);

    // üéØ PROCESSAR BASEADO NO TIPO DA MENSAGEM
    if (messageAnalysis.needsClientInput) {
      console.log(`[RESTAURANT] ‚ùì Pergunta que precisa do cliente real`);
      
      await notifyClientForInput(sessionId, messageText, order.orderData);
      
      order.status = 'waiting_client_response';
      order.pendingQuestion = messageText;
      
    } else {
      console.log(`[RESTAURANT] ü§ñ Gerando resposta autom√°tica como cliente`);
      
      // Gerar resposta autom√°tica usando Gemini
      const response = await generateClientResponse(conversation, order.orderData || {});
      
      if (response) {
        console.log(`[RESTAURANT] üí¨ Resposta gerada: ${response.substring(0, 100)}...`);
        
        // Adicionar delay para parecer natural
        const delay = 2000 + Math.random() * 4000;
        console.log(`[RESTAURANT] ‚è≥ Aguardando ${Math.round(delay/1000)}s...`);
        
        await new Promise(resolve => setTimeout(resolve, delay));
        
        // Enviar resposta para o restaurante
        const sent = await sendWhatsAppMessage(restaurantPhone, response);
        
        if (sent) {
          console.log(`[RESTAURANT] ‚úÖ Resposta enviada com sucesso`);
          
          // Adicionar nossa resposta √† conversa
          conversation.push({
            role: 'client',
            content: response,
            timestamp: new Date()
          });

          // üéâ VERIFICAR SE O PEDIDO FOI CONFIRMADO
          if (messageAnalysis.type === 'confirmed') {
            console.log(`[RESTAURANT] üéâ PEDIDO CONFIRMADO!`);
            
            order.status = 'confirmed';
            await notifyClientOrderConfirmed(sessionId, messageText, order.orderData);
            await sendMultipleClientUpdates(sessionId, messageText, order.orderData);
            
          } else if (messageAnalysis.type === 'preparing') {
            console.log(`[RESTAURANT] üë®‚Äçüç≥ PEDIDO EM PREPARO!`);
            
            order.status = 'preparing';
            await notifyClientOrderStatus(sessionId, 'Seu pedido est√° sendo preparado! üë®‚Äçüç≥', order.orderData);
            
          } else if (messageAnalysis.type === 'out_for_delivery') {
            console.log(`[RESTAURANT] üõµ SAIU PARA ENTREGA!`);
            
            order.status = 'out_for_delivery';
            await notifyClientOrderStatus(sessionId, 'Seu pedido saiu para entrega! üõµ', order.orderData);
          }
          
        } else {
          console.log(`[RESTAURANT] ‚ùå Erro ao enviar resposta`);
        }
      }
    }

    // Salvar conversa e pedido atualizados
    global.restaurantConversations.set(sessionId, conversation);
    global.orders.set(sessionId, order);

    console.log(`[RESTAURANT] üíæ Dados salvos para sess√£o: ${sessionId}`);

  } catch (error) {
    console.error('[RESTAURANT] ‚ùå Erro ao processar resposta:', error);
  }
}

// üîç ANALISAR MENSAGEM DO RESTAURANTE
function analyzeRestaurantMessage(message) {
  const messageLower = message.toLowerCase();
  
  const clientInputKeywords = [
    'forma de pagamento', 'precisa de troco', 'quanto de troco', 'cart√£o ou dinheiro',
    'pix ou dinheiro', 'observa√ß√µes', 'sem cebola', 'sem tomate', 'ponto da carne',
    'bebida gelada', 'refrigerante', 'qual sabor', 'qual tamanho', 'confirma o endere√ßo',
    'qual o complemento', 'apartamento', 'bloco', 'refer√™ncia', 'voc√™ prefere',
    'gostaria de', 'quer adicionar', 'alguma observa√ß√£o', 'alguma prefer√™ncia'
  ];

  const confirmationKeywords = [
    'pedido confirmado', 'vamos preparar', 'j√° estamos preparando', 'tempo de entrega',
    'chega em', 'fica pronto em', 'ok, anotado', 'perfeito', 'confirmado',
    'anotei', 'valor total', 'total fica', 'vai ficar'
  ];

  const preparingKeywords = [
    'preparando', 'na cozinha', 'fazendo', 'no forno', 'assando', 'montando'
  ];

  const deliveryKeywords = [
    'saiu para entrega', 'a caminho', 'entregador saiu', 'motoboy saiu', 
    'delivery a caminho', 'saindo', 'chegando'
  ];

  const needsClientInput = clientInputKeywords.some(keyword => 
    messageLower.includes(keyword)
  );

  let type = 'general';
  if (confirmationKeywords.some(k => messageLower.includes(k))) type = 'confirmed';
  else if (preparingKeywords.some(k => messageLower.includes(k))) type = 'preparing';
  else if (deliveryKeywords.some(k => messageLower.includes(k))) type = 'out_for_delivery';

  return {
    type,
    needsClientInput,
    isQuestion: messageLower.includes('?'),
    isGreeting: messageLower.includes('oi') || messageLower.includes('ol√°')
  };
}

// ü§ñ GERAR RESPOSTA AUTOM√ÅTICA COMO CLIENTE
async function generateClientResponse(conversation, orderData) {
  try {
    console.log(`[CLIENT_AI] ü§ñ Gerando resposta como cliente`);
    
    const orderContext = `
Comida pedida: ${orderData.food || 'Pizza'}
Nome: ${orderData.clientName || 'Cliente'}
Endere√ßo: ${orderData.address || 'Informado'}
Telefone: ${orderData.phone || 'Informado'}  
Pagamento: ${orderData.paymentMethod || 'Informado'}
${orderData.change ? `Troco para: R$ ${orderData.change}` : ''}
`;

    const conversationHistory = conversation.map(msg => {
      const role = msg.role === 'restaurant' ? 'Restaurante' : 'Eu';
      return `${role}: ${msg.content}`;
    }).slice(-6).join('\n');

    const prompt = CLIENT_RESPONSE_PROMPT
      .replace('{ORDER_CONTEXT}', orderContext)
      .replace('{CONVERSATION_HISTORY}', conversationHistory);

    const result = await model.generateContent(prompt);
    const response = result.response.text().trim();

    let finalResponse = response;
    if (finalResponse.length > 200) {
      finalResponse = finalResponse.substring(0, 200).trim();
      const lastSpace = finalResponse.lastIndexOf(' ');
      if (lastSpace > 160) {
        finalResponse = finalResponse.substring(0, lastSpace);
      }
    }

    console.log(`[CLIENT_AI] ‚úÖ Resposta gerada: ${finalResponse}`);
    return finalResponse;

  } catch (error) {
    console.error('[CLIENT_AI] ‚ùå Erro ao gerar resposta:', error);
    
    // Fallbacks baseados na mensagem do restaurante
    const lastMessage = conversation[conversation.length - 1]?.content || '';
    
    if (lastMessage.toLowerCase().includes('confirmado')) {
      return 'Perfeito! Obrigado! Quanto tempo vai demorar? üòä';
    } else if (lastMessage.toLowerCase().includes('tempo')) {
      return 'Ok, perfeito! Obrigado! üëç';
    } else if (lastMessage.toLowerCase().includes('valor')) {
      return 'Est√° certo! Pode fazer. Obrigado! üôè';
    } else {
      return 'Entendi! Obrigado pela informa√ß√£o. üòä';
    }
  }
}

// üì¢ NOTIFICAR CLIENTE - USANDO N√öMERO DO CLIENTE
async function notifyClientForInput(sessionId, question, orderData) {
  console.log(`[NOTIFY] üì¢ Notificar cliente ${sessionId}: ${question}`);
  
  if (orderData && orderData.phone) {
    console.log(`[NOTIFY] üì± Enviando para cliente: ${orderData.phone}`);
    
    const clientMessage = `üçï IA Fome: O restaurante perguntou:

"${question}"

Por favor, responda no chat do IA Fome: https://iafome.netlify.app

Preciso da sua resposta para continuar o pedido! üôè`;
    
    await sendWhatsAppMessage(orderData.phone, clientMessage);
    console.log(`[NOTIFY] üì± Notifica√ß√£o enviada para cliente`);
  } else {
    console.log(`[NOTIFY] ‚ö†Ô∏è Dados do cliente n√£o encontrados`);
  }
}

// üéâ NOTIFICAR CLIENTE QUE PEDIDO FOI CONFIRMADO
async function notifyClientOrderConfirmed(sessionId, restaurantMessage, orderData) {
  console.log(`[NOTIFY] üéâ Pedido confirmado para cliente ${sessionId}`);
  
  if (orderData && orderData.phone) {
    const clientName = orderData.clientName || 'Cliente';
    
    const clientMessage = `üéâ ${clientName}! SEU PEDIDO FOI CONFIRMADO!

${restaurantMessage}

Pode ficar tranquilo(a) que est√° tudo certo! Vou te avisar por WhatsApp quando houver novidades! üòä

Acompanhe: https://iafome.netlify.app`;
    
    await sendWhatsAppMessage(orderData.phone, clientMessage);
    console.log(`[NOTIFY] üéâ Confirma√ß√£o enviada para cliente`);
  }
}

// üì± ENVIAR M√öLTIPLAS MENSAGENS SEQUENCIAIS
async function sendMultipleClientUpdates(sessionId, restaurantMessage, orderData) {
  console.log(`[NOTIFY] üì± Enviando atualiza√ß√µes sequenciais`);
  
  if (orderData && orderData.phone) {
    const clientPhone = orderData.phone;
    const clientName = orderData.clientName || 'Cliente';
    
    // Mensagem 1
    await sendWhatsAppMessage(clientPhone, `üéâ Perfeito, ${clientName}! Seu pedido foi confirmado pelo restaurante!`);
    await new Promise(resolve => setTimeout(resolve, 3000));
    
    // Mensagem 2
    await sendWhatsAppMessage(clientPhone, 'üë®‚Äçüç≥ Eles j√° come√ßaram a preparar sua comida! Tudo certo!');
    await new Promise(resolve => setTimeout(resolve, 2500));
    
    // Mensagem 3
    await sendWhatsAppMessage(clientPhone, 'üì± Pode fechar o IA Fome tranquilo! Vou te avisar aqui no WhatsApp quando sair para entrega! üòä');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Mensagem 4
    await sendWhatsAppMessage(clientPhone, '‚è∞ Seu pedido deve chegar em cerca de 40-50 minutos. Relaxa que est√° tudo sob controle! üçï‚ú®');
    
    console.log(`[NOTIFY] üéâ Todas as mensagens enviadas!`);
  }
}

// üìä NOTIFICAR CLIENTE SOBRE STATUS
async function notifyClientOrderStatus(sessionId, statusMessage, orderData) {
  console.log(`[NOTIFY] üìä Status para cliente ${sessionId}: ${statusMessage}`);
  
  if (orderData && orderData.phone) {
    const fullMessage = `üçï IA Fome: ${statusMessage}

Qualquer novidade eu te aviso! üòä`;
    
    await sendWhatsAppMessage(orderData.phone, fullMessage);
    console.log(`[NOTIFY] üìä Status enviado para cliente`);
  }
}

// üì± ENVIAR MENSAGEM VIA EVOLUTION API
async function sendWhatsAppMessage(phone, message) {
  try {
    console.log(`[WHATSAPP] üì± Enviando para: ${phone}`);
    
    if (!EVOLUTION_BASE_URL || !EVOLUTION_TOKEN || !EVOLUTION_INSTANCE_ID) {
      console.error(`[WHATSAPP] ‚ùå Configura√ß√µes faltando!`);
      return false;
    }

    const cleanPhone = phone.replace(/\D/g, '');
    const url = `${EVOLUTION_BASE_URL}/message/sendText/${EVOLUTION_INSTANCE_ID}`;

    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'apikey': EVOLUTION_TOKEN
      },
      body: JSON.stringify({
        number: cleanPhone,
        text: message
      })
    });

    if (response.ok) {
      console.log(`[WHATSAPP] ‚úÖ Mensagem enviada!`);
      return true;
    } else {
      console.error(`[WHATSAPP] ‚ùå Erro ${response.status}`);
      return false;
    }
    
  } catch (error) {
    console.error(`[WHATSAPP] ‚ùå Erro cr√≠tico:`, error);
    return false;
  }
}
